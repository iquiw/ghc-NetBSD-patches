From e4ec60265023731568e08b4bab975087688dc9e5 Mon Sep 17 00:00:00 2001
From: Iku Iwasa <iku.iwasa@gmail.com>
Date: Mon, 6 Feb 2012 14:03:06 +0900
Subject: [PATCH] FFI wrappers and type changes for NetBSD.

---
 base/GHC/Event/KQueue.hsc                          |   30 +++++++++++++++--
 base/System/Posix/Internals.hs                     |    2 +-
 base/configure.ac                                  |    9 +++++
 base/include/EventConfig.h.in                      |    9 +++++
 base/include/HsBase.h                              |   29 +++++++++++++++++
 .../System/Console/Haskeline/Backend/IConv.hsc     |    2 +-
 haskeline/cbits/h_iconv.c                          |    5 +++
 haskeline/includes/h_iconv.h                       |    1 +
 old-time/System/Time.hsc                           |    8 ++--
 old-time/cbits/timeUtils.c                         |   20 +++++++++++
 old-time/include/HsTime.h                          |    5 +++
 time/Data/Time/Clock/CTimeval.hs                   |   34 +++++++++++++++----
 time/cbits/HsTime.c                                |    5 +++
 time/configure.ac                                  |    4 ++
 time/include/HsTime.h                              |    1 +
 time/test/Makefile                                 |    2 +-
 unix/System/Posix/Signals.hsc                      |    4 +-
 17 files changed, 150 insertions(+), 20 deletions(-)

diff --git a/base/GHC/Event/KQueue.hsc b/base/GHC/Event/KQueue.hsc
index 68aade3..e4c33d7 100644
--- a/base/GHC/Event/KQueue.hsc
+++ b/base/GHC/Event/KQueue.hsc
@@ -30,7 +30,7 @@ available = False
 import Control.Concurrent.MVar (MVar, newMVar, swapMVar, withMVar)
 import Control.Monad (when, unless)
 import Data.Bits (Bits(..))
-import Data.Word (Word16, Word32)
+import Data.Word (Word16, Word32, Word64)
 import Foreign.C.Error (throwErrnoIfMinus1)
 import Foreign.C.Types
 import Foreign.Marshal.Alloc (alloca)
@@ -49,7 +49,6 @@ import qualified GHC.Event.Array as A
 
 #if defined(HAVE_KEVENT64)
 import Data.Int (Int64)
-import Data.Word (Word64)
 #endif
 
 #include <sys/types.h>
@@ -172,7 +171,7 @@ data Event = KEvent {
     , filter :: {-# UNPACK #-} !Filter
     , flags  :: {-# UNPACK #-} !Flag
     , fflags :: {-# UNPACK #-} !FFlag
-    , data_  :: {-# UNPACK #-} !CIntPtr
+    , data_  :: {-# UNPACK #-} !FData
     , udata  :: {-# UNPACK #-} !(Ptr ())
     } deriving Show
 
@@ -210,7 +209,14 @@ newtype FFlag = FFlag Word32
  , noteEOF = NOTE_EOF
  }
 
+#ifndef SIZEOF_KEV_FLAGS
+#error "SIZEOF_KEV_FLAGS is not defined, run autoreconf!"
+#endif
+#if SIZEOF_KEV_FLAGS == 4 /* NetBSD uses uint32_t for kevent.flag */
+newtype Flag = Flag Word32
+#else
 newtype Flag = Flag Word16
+#endif
     deriving (Eq, Show, Storable)
 
 #{enum Flag, Flag
@@ -218,7 +224,14 @@ newtype Flag = Flag Word16
  , flagDelete  = EV_DELETE
  }
 
+#ifndef SIZEOF_KEV_FILTER
+#error "SIZEOF_KEV_FILTER is not defined, run autoreconf!"
+#endif
+#if SIZEOF_KEV_FILTER == 4 /* NetBSD uses uint32_t for kevent.filter */
+newtype Filter = Filter Word32
+#else
 newtype Filter = Filter Word16
+#endif
     deriving (Bits, Eq, Num, Show, Storable)
 
 #{enum Filter, Filter
@@ -226,6 +239,15 @@ newtype Filter = Filter Word16
  , filterWrite  = EVFILT_WRITE
  }
 
+#ifndef SIZEOF_KEV_DATA
+#error "SIZEOF_KEV_DATA is not defined, run autoreconf!"
+#endif
+#if SIZEOF_KEV_DATA == 8 /* NetBSD uses int64_t for kevent.data */
+type FData = Word64
+#else /* assume intptr */
+type FData = CIntPtr
+#endif
+
 data TimeSpec = TimeSpec {
       tv_sec  :: {-# UNPACK #-} !CTime
     , tv_nsec :: {-# UNPACK #-} !CLong
@@ -291,7 +313,7 @@ foreign import ccall safe "kevent64"
     c_kevent64 :: QueueFd -> Ptr Event -> CInt -> Ptr Event -> CInt -> CUInt
                -> Ptr TimeSpec -> IO CInt
 #elif defined(HAVE_KEVENT)
-foreign import ccall safe "kevent"
+foreign import ccall safe "__hscore_kevent"
     c_kevent :: QueueFd -> Ptr Event -> CInt -> Ptr Event -> CInt
              -> Ptr TimeSpec -> IO CInt
 #else
diff --git a/base/System/Posix/Internals.hs b/base/System/Posix/Internals.hs
index 2c2b965..e51705e 100644
--- a/base/System/Posix/Internals.hs
+++ b/base/System/Posix/Internals.hs
@@ -486,7 +486,7 @@ foreign import ccall unsafe "HsBase.h __hscore_sigemptyset"
 foreign import ccall unsafe "HsBase.h __hscore_sigaddset"
    c_sigaddset :: Ptr CSigset -> CInt -> IO CInt
 
-foreign import ccall unsafe "HsBase.h sigprocmask"
+foreign import ccall unsafe "HsBase.h __hscore_sigprocmask"
    c_sigprocmask :: CInt -> Ptr CSigset -> Ptr CSigset -> IO CInt
 
 foreign import ccall unsafe "HsBase.h tcgetattr"
diff --git a/base/configure.ac b/base/configure.ac
index 071e42a..f9acc1f 100644
--- a/base/configure.ac
+++ b/base/configure.ac
@@ -49,6 +49,15 @@ fi
 
 if test "$ac_cv_header_sys_event_h" = yes -a "$ac_cv_func_kqueue" = yes; then
   AC_DEFINE([HAVE_KQUEUE], [1], [Define if you have kqueue support.])
+
+  AC_CHECK_SIZEOF([kev.filter], [], [#include <sys/event.h>
+struct kevent kev;])
+
+  AC_CHECK_SIZEOF([kev.flags], [], [#include <sys/event.h>
+struct kevent kev;])
+
+  AC_CHECK_SIZEOF([kev.data], [], [#include <sys/event.h>
+struct kevent kev;])
 fi
 
 if test "$ac_cv_header_poll_h" = yes -a "$ac_cv_func_poll" = yes; then
diff --git a/base/include/EventConfig.h.in b/base/include/EventConfig.h.in
index 032ceb1..82f1a96 100644
--- a/base/include/EventConfig.h.in
+++ b/base/include/EventConfig.h.in
@@ -83,3 +83,12 @@
 
 /* Define to 1 if you have the ANSI C header files. */
 #undef STDC_HEADERS
+
+/* The size of `kev.filter', as computed by sizeof. */
+#undef SIZEOF_KEV_FILTER
+
+/* The size of `kev.flags', as computed by sizeof. */
+#undef SIZEOF_KEV_FLAGS
+
+/* The size of `kev.data', as computed by sizeof. */
+#undef SIZEOF_KEV_DATA
diff --git a/base/include/HsBase.h b/base/include/HsBase.h
index cc27cc3..e1e2504 100644
--- a/base/include/HsBase.h
+++ b/base/include/HsBase.h
@@ -145,6 +145,10 @@ extern HsWord64 getUSecOfDay(void);
 #include <sys/select.h>
 #endif
 
+#if HAVE_SYS_EVENT_H
+#include <sys/event.h>
+#endif
+
 /* in inputReady.c */
 extern int fdReady(int fd, int write, int msecs, int isSock);
 
@@ -201,6 +205,18 @@ __hscore_sigdelset( sigset_t * set, int s )
 INLINE int
 __hscore_sigismember( sigset_t * set, int s )
 { return sigismember(set,s); }
+
+INLINE int
+__hscore_sigprocmask( int how, sigset_t * set, sigset_t * oset )
+{ return sigprocmask(how,set,oset); }
+
+INLINE int
+__hscore_sigpending( sigset_t * set )
+{ return sigpending(set); }
+
+INLINE int
+__hscore_sigsuspend( sigset_t * set )
+{ return sigsuspend(set); }
 #endif
 
 INLINE void *
@@ -605,6 +621,10 @@ INLINE off_t __hscore_lseek(int fd, off_t off, int whence) {
 }
 #endif
 
+INLINE int __hscore_getrusage(int who, struct rusage *rusage) {
+	return getrusage(who, rusage);
+}
+
 // select-related stuff
 
 #if !defined(__MINGW32__)
@@ -620,6 +640,15 @@ INLINE int __hscore_select(int nfds, fd_set *readfds, fd_set *writefds,
 	return (select(nfds,readfds,writefds,exceptfds,timeout));
 }
 
+#ifdef HAVE_KQUEUE
+INLINE int __hscore_kevent(int kq, const struct kevent *changelist,
+                           size_t nchanges, struct kevent *eventlist,
+                           size_t nevents, const struct timespec *timeout) {
+	return kevent(kq, changelist, nchanges, eventlist, nevents, timeout);
+}
+#endif
+
+
 #if darwin_HOST_OS
 // You should not access _environ directly on Darwin in a bundle/shared library.
 // See #2458 and http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man7/environ.7.html
diff --git a/haskeline/System/Console/Haskeline/Backend/IConv.hsc b/haskeline/System/Console/Haskeline/Backend/IConv.hsc
index a217ac4..dd911ba 100644
--- a/haskeline/System/Console/Haskeline/Backend/IConv.hsc
+++ b/haskeline/System/Console/Haskeline/Backend/IConv.hsc
@@ -62,7 +62,7 @@ openPartialDecoder codeset = do
 ---------------------
 -- Setting the locale
 
-foreign import ccall "setlocale" c_setlocale :: CInt -> CString -> IO CString
+foreign import ccall "h_setlocale" c_setlocale :: CInt -> CString -> IO CString
 
 setLocale :: Maybe String -> IO (Maybe String)
 setLocale oldLocale = (maybeWith withCAString) oldLocale $ \loc_p -> do
diff --git a/haskeline/cbits/h_iconv.c b/haskeline/cbits/h_iconv.c
index 71234c8..7127a4c 100644
--- a/haskeline/cbits/h_iconv.c
+++ b/haskeline/cbits/h_iconv.c
@@ -16,3 +16,8 @@ size_t h_iconv(iconv_t cd, char **inbuf, size_t *inbytesleft,
     // a (char **).
     return iconv(cd, (void*)inbuf, inbytesleft, outbuf, outbytesleft);
 }
+
+char *h_setlocale(int category, const char *locale)
+{
+    return setlocale(category, locale);
+}
diff --git a/haskeline/includes/h_iconv.h b/haskeline/includes/h_iconv.h
index 9022381..32a7cfb 100644
--- a/haskeline/includes/h_iconv.h
+++ b/haskeline/includes/h_iconv.h
@@ -7,3 +7,4 @@ void h_iconv_close(iconv_t cd);
 size_t h_iconv(iconv_t cd, char **inbuf, size_t *inbytesleft,
                 char **outbuf, size_t *outbytesleft);
 
+char *h_setlocale(int category, const char *locale);
diff --git a/old-time/System/Time.hsc b/old-time/System/Time.hsc
index 1ddddba..0219c4e 100644
--- a/old-time/System/Time.hsc
+++ b/old-time/System/Time.hsc
@@ -739,17 +739,17 @@ type CTm = () -- struct tm
 foreign import ccall unsafe "HsTime.h __hscore_localtime_r"
     localtime_r :: Ptr CTime -> Ptr CTm -> IO (Ptr CTm)
 #else
-foreign import ccall unsafe "time.h localtime"
+foreign import ccall unsafe "time.h __hscore_localtime"
     localtime   :: Ptr CTime -> IO (Ptr CTm)
 #endif
 #if HAVE_GMTIME_R
 foreign import ccall unsafe "HsTime.h __hscore_gmtime_r"
     gmtime_r    :: Ptr CTime -> Ptr CTm -> IO (Ptr CTm)
 #else
-foreign import ccall unsafe "time.h gmtime"
+foreign import ccall unsafe "time.h __hscore_gmtime"
     gmtime      :: Ptr CTime -> IO (Ptr CTm)
 #endif
-foreign import ccall unsafe "time.h mktime"
+foreign import ccall unsafe "time.h __hscore_mktime"
     mktime      :: Ptr CTm   -> IO CTime
 
 #if HAVE_GETTIMEOFDAY
@@ -765,6 +765,6 @@ foreign import ccall unsafe "time.h ftime" ftime :: Ptr CTimeB -> IO CInt
 foreign import ccall unsafe "time.h ftime" ftime :: Ptr CTimeB -> IO ()
 #endif
 #else
-foreign import ccall unsafe "time.h time" time :: Ptr CTime -> IO CTime
+foreign import ccall unsafe "time.h __hscore_time" time :: Ptr CTime -> IO CTime
 #endif
 #endif /* ! __HUGS__ */
diff --git a/old-time/cbits/timeUtils.c b/old-time/cbits/timeUtils.c
index d2d9ef4..f2131cb 100644
--- a/old-time/cbits/timeUtils.c
+++ b/old-time/cbits/timeUtils.c
@@ -35,4 +35,24 @@ long *__hscore_timezone( void )
 char **__hscore_tzname( void )
 { return _tzname; }
 #endif
+
+struct tm *__hscore_localtime(const time_t *clock)
+{
+    return localtime(clock);
+}
+
+struct tm *__hscore_gmtime(const time_t *clock)
+{
+    return gmtime(clock);
+}
+
+time_t __hscore_mktime(struct tm *tm)
+{
+    return mktime(tm);
+}
+
+time_t __hscore_time(time_t *clock)
+{
+    return time(clock);
+}
 #endif
diff --git a/old-time/include/HsTime.h b/old-time/include/HsTime.h
index 544cd02..69a1239 100644
--- a/old-time/include/HsTime.h
+++ b/old-time/include/HsTime.h
@@ -46,4 +46,9 @@ extern struct tm *__hscore_gmtime_r(const time_t *clock, struct tm *result);
 extern struct tm *__hscore_localtime_r(const time_t *clock, struct tm *result);
 #endif
 
+struct tm *__hscore_localtime(const time_t *clock);
+struct tm *__hscore_gmtime(const time_t *clock);
+time_t __hscore_mktime(struct tm *tm);
+time_t __hscore_time(time_t *clock);
+
 #endif /* __TIMEUTILS_H__ */
diff --git a/time/Data/Time/Clock/CTimeval.hs b/time/Data/Time/Clock/CTimeval.hs
index 5e0ffdf..5ce3c11 100644
--- a/time/Data/Time/Clock/CTimeval.hs
+++ b/time/Data/Time/Clock/CTimeval.hs
@@ -7,20 +7,40 @@ module Data.Time.Clock.CTimeval where
 import Foreign
 import Foreign.C
 
-data CTimeval = MkCTimeval CLong CLong
+#include "HsTimeConfig.h"
+
+--
+-- we assume time_t and suseconds_t are either long long or long.
+--
+#ifndef SIZEOF_TIME_T
+#error "SIZEOF_TIME_T is not defined, run autoreconf!"
+#endif
+#if SIZEOF_TIME_T == SIZEOF_LONG_LONG
+type TimeT = CLLong
+#elif SIZEOF_TIME_T == SIZEOF_LONG
+type TimeT = CLong
+#endif
+
+#if SIZEOF_SUSECONDS_T == SIZEOF_LONG_LONG
+type SusecondsT = CLLong
+#elif SIZEOF_SUSECONDS_T == SIZEOF_LONG
+type SusecondsT = CLong
+#endif
+
+data CTimeval = MkCTimeval TimeT SusecondsT
 
 instance Storable CTimeval where
-	sizeOf _ = (sizeOf (undefined :: CLong)) * 2
+	sizeOf _ = sizeOf (undefined :: TimeT) + sizeOf (undefined :: SusecondsT)
 	alignment _ = alignment (undefined :: CLong)
 	peek p = do
-		s   <- peekElemOff (castPtr p) 0
-		mus <- peekElemOff (castPtr p) 1
+		s   <- peekByteOff p 0
+		mus <- peekByteOff p (sizeOf (undefined :: TimeT))
 		return (MkCTimeval s mus)
 	poke p (MkCTimeval s mus) = do
-		pokeElemOff (castPtr p) 0 s
-		pokeElemOff (castPtr p) 1 mus
+		pokeByteOff p 0 s
+		pokeByteOff p (sizeOf (undefined :: TimeT)) mus
 
-foreign import ccall unsafe "time.h gettimeofday" gettimeofday :: Ptr CTimeval -> Ptr () -> IO CInt
+foreign import ccall unsafe "HsTime.h __hstime_gettimeofday" gettimeofday :: Ptr CTimeval -> Ptr () -> IO CInt
 
 -- | Get the current POSIX time from the system clock.
 getCTimeval :: IO CTimeval
diff --git a/time/cbits/HsTime.c b/time/cbits/HsTime.c
index dacb1d4..3f835f2 100644
--- a/time/cbits/HsTime.c
+++ b/time/cbits/HsTime.c
@@ -38,3 +38,8 @@ long int get_current_timezone_seconds (time_t t,int* pdst,char const* * pname)
 	}
 	else return 0x80000000;
 }
+
+int __hstime_gettimeofday(struct timeval *tv, void *tz)
+{
+	return gettimeofday(tv, tz);
+}
diff --git a/time/configure.ac b/time/configure.ac
index dc58c49..050fdf6 100644
--- a/time/configure.ac
+++ b/time/configure.ac
@@ -12,6 +12,10 @@ AC_CONFIG_HEADERS([include/HsTimeConfig.h])
 
 AC_CHECK_HEADERS([time.h])
 AC_CHECK_FUNCS([gmtime_r localtime_r])
+AC_CHECK_SIZEOF([time_t])
+AC_CHECK_SIZEOF([suseconds_t])
+AC_CHECK_SIZEOF([long])
+AC_CHECK_SIZEOF([long long])
 
 AC_STRUCT_TM
 AC_STRUCT_TIMEZONE
diff --git a/time/include/HsTime.h b/time/include/HsTime.h
index 5296437..dfe05fe 100644
--- a/time/include/HsTime.h
+++ b/time/include/HsTime.h
@@ -19,5 +19,6 @@
 #endif
 
 long int get_current_timezone_seconds (time_t,int* pdst,char const* * pname);
+int __hstime_gettimeofday(struct timeval*, void*);
 
 #endif
diff --git a/time/test/Makefile b/time/test/Makefile
index f8ef07d..f3d041f 100644
--- a/time/test/Makefile
+++ b/time/test/Makefile
@@ -2,7 +2,7 @@ GHC = ghc
 GHCFLAGS = -package time -package QuickCheck-1.2.0.1
 
 default:
-	make CurrentTime.run ShowDST.run test
+	$(MAKE) CurrentTime.run ShowDST.run test
 
 TestMonthDay: TestMonthDay.o
 	$(GHC) $(GHCFLAGS) $^ -o $@
diff --git a/unix/System/Posix/Signals.hsc b/unix/System/Posix/Signals.hsc
index 91e642f..a91a379 100644
--- a/unix/System/Posix/Signals.hsc
+++ b/unix/System/Posix/Signals.hsc
@@ -598,7 +598,7 @@ awaitSignal maybe_sigset = do
   -- XXX My manpage says it can also return EFAULT. And why is ignoring
   -- EINTR the right thing to do?
 
-foreign import ccall unsafe "sigsuspend"
+foreign import ccall unsafe "__hscore_sigsuspend"
   c_sigsuspend :: Ptr CSigset -> IO CInt
 #endif
 
@@ -622,6 +622,6 @@ foreign import ccall unsafe "__hscore_sigismember"
   c_sigismember :: Ptr CSigset -> CInt -> IO CInt
 #endif /* __HUGS__ */
 
-foreign import ccall unsafe "sigpending"
+foreign import ccall unsafe "__hscore_sigpending"
   c_sigpending :: Ptr CSigset -> IO CInt
 
-- 
1.7.8.4

