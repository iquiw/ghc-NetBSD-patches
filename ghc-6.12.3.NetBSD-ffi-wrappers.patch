From 6bb40d708851780341ddc7e830e8503b481b890a Mon Sep 17 00:00:00 2001
From: Iku Iwasa <iku.iwasa@gmail.com>
Date: Sun, 5 Aug 2012 21:56:11 +0900
Subject: [PATCH] FFI wrappers and type changes for NetBSD.

---
 base/System/CPUTime.hsc                            |  2 +-
 base/System/Posix/Internals.hs                     |  2 +-
 base/include/HsBase.h                              | 17 ++++++++++
 .../System/Console/Haskeline/Backend/IConv.hsc     |  2 +-
 haskeline/cbits/h_iconv.c                          |  5 +++
 haskeline/includes/h_iconv.h                       |  1 +
 time/Data/Time/Clock/CTimeval.hs                   | 38 ++++++++++++++++++----
 time/cbits/HsTime.c                                |  5 +++
 time/configure.ac                                  |  5 +++
 time/include/HsTime.h                              |  2 ++
 unix/System/Posix/Signals.hsc                      |  4 +--
 11 files changed, 71 insertions(+), 12 deletions(-)

diff --git a/base/System/CPUTime.hsc b/base/System/CPUTime.hsc
index c2faa1c..98491e8 100644
--- a/base/System/CPUTime.hsc
+++ b/base/System/CPUTime.hsc
@@ -104,7 +104,7 @@ getCPUTime = do
                 * 1000000)
 
 type CRUsage = ()
-foreign import ccall unsafe getrusage :: CInt -> Ptr CRUsage -> IO CInt
+foreign import ccall unsafe "__hscore_getrusage" getrusage :: CInt -> Ptr CRUsage -> IO CInt
 #else
 # if defined(HAVE_TIMES)
     allocaBytes (#const sizeof(struct tms)) $ \ p_tms -> do
diff --git a/base/System/Posix/Internals.hs b/base/System/Posix/Internals.hs
index f296a63..7b8053f 100644
--- a/base/System/Posix/Internals.hs
+++ b/base/System/Posix/Internals.hs
@@ -448,7 +448,7 @@ foreign import ccall unsafe "HsBase.h __hscore_sigemptyset"
 foreign import ccall unsafe "HsBase.h __hscore_sigaddset"
    c_sigaddset :: Ptr CSigset -> CInt -> IO CInt
 
-foreign import ccall unsafe "HsBase.h sigprocmask"
+foreign import ccall unsafe "HsBase.h __hscore_sigprocmask"
    c_sigprocmask :: CInt -> Ptr CSigset -> Ptr CSigset -> IO CInt
 
 foreign import ccall unsafe "HsBase.h tcgetattr"
diff --git a/base/include/HsBase.h b/base/include/HsBase.h
index 9bc5f28..8c14166 100644
--- a/base/include/HsBase.h
+++ b/base/include/HsBase.h
@@ -203,6 +203,19 @@ __hscore_sigismember( sigset_t * set, int s )
 { return sigismember(set,s); }
 
 INLINE int
+__hscore_sigprocmask( int how, sigset_t * set, sigset_t * oset )
+{ return sigprocmask(how,set,oset); }
+
+INLINE int
+__hscore_sigpending( sigset_t * set )
+{ return sigpending(set); }
+
+INLINE int
+__hscore_sigsuspend( sigset_t * set )
+{ return sigsuspend(set); }
+
+
+INLINE int
 __hscore_utime( const char *file, const struct utimbuf *timep )
 { return utime(file,timep); }
 #endif
@@ -614,6 +627,10 @@ INLINE off_t __hscore_lseek(int fd, off_t off, int whence) {
 }
 #endif
 
+INLINE int __hscore_getrusage(int who, struct rusage *rusage) {
+	return getrusage(who, rusage);
+}
+
 // select-related stuff
 
 #if !defined(__MINGW32__)
diff --git a/haskeline/System/Console/Haskeline/Backend/IConv.hsc b/haskeline/System/Console/Haskeline/Backend/IConv.hsc
index 5544143..872b6ea 100644
--- a/haskeline/System/Console/Haskeline/Backend/IConv.hsc
+++ b/haskeline/System/Console/Haskeline/Backend/IConv.hsc
@@ -62,7 +62,7 @@ openPartialDecoder codeset = do
 ---------------------
 -- Setting the locale
 
-foreign import ccall "setlocale" c_setlocale :: CInt -> CString -> IO CString
+foreign import ccall "h_setlocale" c_setlocale :: CInt -> CString -> IO CString
 
 setLocale :: Maybe String -> IO (Maybe String)
 setLocale oldLocale = (maybeWith withCString) oldLocale $ \loc_p -> do
diff --git a/haskeline/cbits/h_iconv.c b/haskeline/cbits/h_iconv.c
index aa8674d..a5981a6 100644
--- a/haskeline/cbits/h_iconv.c
+++ b/haskeline/cbits/h_iconv.c
@@ -13,3 +13,8 @@ size_t h_iconv(iconv_t cd, char **inbuf, size_t *inbytesleft,
                 char **outbuf, size_t *outbytesleft) {
     return iconv(cd, inbuf, inbytesleft, outbuf, outbytesleft);
 }
+
+char *h_setlocale(int category, const char *locale)
+{
+    return setlocale(category, locale);
+}
diff --git a/haskeline/includes/h_iconv.h b/haskeline/includes/h_iconv.h
index 9022381..32a7cfb 100644
--- a/haskeline/includes/h_iconv.h
+++ b/haskeline/includes/h_iconv.h
@@ -7,3 +7,4 @@ void h_iconv_close(iconv_t cd);
 size_t h_iconv(iconv_t cd, char **inbuf, size_t *inbytesleft,
                 char **outbuf, size_t *outbytesleft);
 
+char *h_setlocale(int category, const char *locale);
diff --git a/time/Data/Time/Clock/CTimeval.hs b/time/Data/Time/Clock/CTimeval.hs
index 5e0ffdf..b55eb56 100644
--- a/time/Data/Time/Clock/CTimeval.hs
+++ b/time/Data/Time/Clock/CTimeval.hs
@@ -7,20 +7,44 @@ module Data.Time.Clock.CTimeval where
 import Foreign
 import Foreign.C
 
-data CTimeval = MkCTimeval CLong CLong
+#include "HsTimeConfig.h"
+
+--
+-- we assume time_t and suseconds_t are either long long, long or int.
+--
+#ifndef SIZEOF_TIME_T
+#error "SIZEOF_TIME_T is not defined, run autoreconf!"
+#endif
+#if SIZEOF_TIME_T == SIZEOF_LONG_LONG
+type TimeT = CLLong
+#elif SIZEOF_TIME_T == SIZEOF_LONG
+type TimeT = CLong
+#elif SIZEOF_TIME_T == SIZEOF_INT
+type TimeT = CInt
+#endif
+
+#if SIZEOF_SUSECONDS_T == SIZEOF_LONG_LONG
+type SusecondsT = CLLong
+#elif SIZEOF_SUSECONDS_T == SIZEOF_LONG
+type SusecondsT = CLong
+#elif SIZEOF_SUSECONDS_T == SIZEOF_INT
+type SusecondsT = CInt
+#endif
+
+data CTimeval = MkCTimeval TimeT SusecondsT
 
 instance Storable CTimeval where
-	sizeOf _ = (sizeOf (undefined :: CLong)) * 2
+	sizeOf _ = sizeOf (undefined :: TimeT) + sizeOf (undefined :: SusecondsT)
 	alignment _ = alignment (undefined :: CLong)
 	peek p = do
-		s   <- peekElemOff (castPtr p) 0
-		mus <- peekElemOff (castPtr p) 1
+		s   <- peekByteOff p 0
+		mus <- peekByteOff p (sizeOf (undefined :: TimeT))
 		return (MkCTimeval s mus)
 	poke p (MkCTimeval s mus) = do
-		pokeElemOff (castPtr p) 0 s
-		pokeElemOff (castPtr p) 1 mus
+		pokeByteOff p 0 s
+		pokeByteOff p (sizeOf (undefined :: TimeT)) mus
 
-foreign import ccall unsafe "time.h gettimeofday" gettimeofday :: Ptr CTimeval -> Ptr () -> IO CInt
+foreign import ccall unsafe "HsTime.h __hstime_gettimeofday" gettimeofday :: Ptr CTimeval -> Ptr () -> IO CInt
 
 -- | Get the current POSIX time from the system clock.
 getCTimeval :: IO CTimeval
diff --git a/time/cbits/HsTime.c b/time/cbits/HsTime.c
index dacb1d4..102902b 100644
--- a/time/cbits/HsTime.c
+++ b/time/cbits/HsTime.c
@@ -38,3 +38,8 @@ long int get_current_timezone_seconds (time_t t,int* pdst,char const* * pname)
 	}
 	else return 0x80000000;
 }
+
+int __hstime_gettimeofday(struct timeval *tp, void *tzp)
+{
+	return gettimeofday(tp, tzp);
+}
diff --git a/time/configure.ac b/time/configure.ac
index 885bb01..90ae57c 100644
--- a/time/configure.ac
+++ b/time/configure.ac
@@ -12,6 +12,11 @@ AC_CONFIG_HEADERS([include/HsTimeConfig.h])
 
 AC_CHECK_HEADERS([time.h])
 AC_CHECK_FUNCS([gmtime_r localtime_r])
+AC_CHECK_SIZEOF([time_t])
+AC_CHECK_SIZEOF([suseconds_t])
+AC_CHECK_SIZEOF([int])
+AC_CHECK_SIZEOF([long])
+AC_CHECK_SIZEOF([long long])
 
 AC_STRUCT_TM
 AC_STRUCT_TIMEZONE
diff --git a/time/include/HsTime.h b/time/include/HsTime.h
index 5296437..531483d 100644
--- a/time/include/HsTime.h
+++ b/time/include/HsTime.h
@@ -20,4 +20,6 @@
 
 long int get_current_timezone_seconds (time_t,int* pdst,char const* * pname);
 
+int __hstime_gettimeofday(struct timeval *tp, void *tzp);
+
 #endif
diff --git a/unix/System/Posix/Signals.hsc b/unix/System/Posix/Signals.hsc
index 454b0dd..98544de 100644
--- a/unix/System/Posix/Signals.hsc
+++ b/unix/System/Posix/Signals.hsc
@@ -581,7 +581,7 @@ awaitSignal maybe_sigset = do
   -- XXX My manpage says it can also return EFAULT. And why is ignoring
   -- EINTR the right thing to do?
  
-foreign import ccall unsafe "sigsuspend"
+foreign import ccall unsafe "__hscore_sigsuspend"
   c_sigsuspend :: Ptr CSigset -> IO CInt
 #endif
 
@@ -605,6 +605,6 @@ foreign import ccall unsafe "__hscore_sigismember"
   c_sigismember :: Ptr CSigset -> CInt -> IO CInt
 #endif /* __HUGS__ */
 
-foreign import ccall unsafe "sigpending"
+foreign import ccall unsafe "__hscore_sigpending"
   c_sigpending :: Ptr CSigset -> IO CInt
 
-- 
1.7.11.3

